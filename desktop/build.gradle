apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "io.anuke.mindustry.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets")

def PACKR_DIR = "$System.env.PACKR_DIR"
def ICON_DIR = new File("core/assets/sprites/icon.icns")

ext.getPlatform = {
    if (project.hasProperty("platform")) {
        def lc = platform.toLowerCase()
        if (lc == "windows64") {
            return "windows64"
        } else if (lc == "windows32") {
            return "windows32"
        } else if (lc == "linux") {
            return "linux64"
        } else if (lc == "mac") {
            return "mac"
        } else {
            throw new InvalidUserDataException("Invalid platform. Set platform with -Pplatform=windows/linux/mac")
        }
    } else {
        throw new InvalidUserDataException("No platform defined. Set platform with -Pplatform=windows/linux/mac")
    }
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    if(System.getProperty("os.name").toLowerCase().contains("mac")){
        jvmArgs "-XstartOnFirstThread"
    }
    ignoreExitValue = true
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    dependsOn classes
    
    writeVersion()

    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir)

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

task clearOut(type: Delete){
    doLast {
        delete "packr-out/"
    }
}

